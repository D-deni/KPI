{
  "resolvedId": "D:/Programming/templates/KPIcopy/node_modules/vscode-jsonrpc/lib/common/connection.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMessageConnection = exports.ConnectionOptions = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.Trace = exports.NullLogger = exports.ProgressType = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst messages_1 = require(\"./messages\");\nconst linkedMap_1 = require(\"./linkedMap\");\nconst events_1 = require(\"./events\");\nconst cancellation_1 = require(\"./cancellation\");\nvar CancelNotification;\n(function (CancelNotification) {\n    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');\n})(CancelNotification || (CancelNotification = {}));\nvar ProgressNotification;\n(function (ProgressNotification) {\n    ProgressNotification.type = new messages_1.NotificationType('$/progress');\n})(ProgressNotification || (ProgressNotification = {}));\nclass ProgressType {\n    constructor() {\n    }\n}\nexports.ProgressType = ProgressType;\nvar StarRequestHandler;\n(function (StarRequestHandler) {\n    function is(value) {\n        return Is.func(value);\n    }\n    StarRequestHandler.is = is;\n})(StarRequestHandler || (StarRequestHandler = {}));\nexports.NullLogger = Object.freeze({\n    error: () => { },\n    warn: () => { },\n    info: () => { },\n    log: () => { }\n});\nvar Trace;\n(function (Trace) {\n    Trace[Trace[\"Off\"] = 0] = \"Off\";\n    Trace[Trace[\"Messages\"] = 1] = \"Messages\";\n    Trace[Trace[\"Verbose\"] = 2] = \"Verbose\";\n})(Trace = exports.Trace || (exports.Trace = {}));\n(function (Trace) {\n    function fromString(value) {\n        if (!Is.string(value)) {\n            return Trace.Off;\n        }\n        value = value.toLowerCase();\n        switch (value) {\n            case 'off':\n                return Trace.Off;\n            case 'messages':\n                return Trace.Messages;\n            case 'verbose':\n                return Trace.Verbose;\n            default:\n                return Trace.Off;\n        }\n    }\n    Trace.fromString = fromString;\n    function toString(value) {\n        switch (value) {\n            case Trace.Off:\n                return 'off';\n            case Trace.Messages:\n                return 'messages';\n            case Trace.Verbose:\n                return 'verbose';\n            default:\n                return 'off';\n        }\n    }\n    Trace.toString = toString;\n})(Trace = exports.Trace || (exports.Trace = {}));\nvar TraceFormat;\n(function (TraceFormat) {\n    TraceFormat[\"Text\"] = \"text\";\n    TraceFormat[\"JSON\"] = \"json\";\n})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));\n(function (TraceFormat) {\n    function fromString(value) {\n        value = value.toLowerCase();\n        if (value === 'json') {\n            return TraceFormat.JSON;\n        }\n        else {\n            return TraceFormat.Text;\n        }\n    }\n    TraceFormat.fromString = fromString;\n})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));\nvar SetTraceNotification;\n(function (SetTraceNotification) {\n    SetTraceNotification.type = new messages_1.NotificationType('$/setTrace');\n})(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));\nvar LogTraceNotification;\n(function (LogTraceNotification) {\n    LogTraceNotification.type = new messages_1.NotificationType('$/logTrace');\n})(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));\nvar ConnectionErrors;\n(function (ConnectionErrors) {\n    /**\n     * The connection is closed.\n     */\n    ConnectionErrors[ConnectionErrors[\"Closed\"] = 1] = \"Closed\";\n    /**\n     * The connection got disposed.\n     */\n    ConnectionErrors[ConnectionErrors[\"Disposed\"] = 2] = \"Disposed\";\n    /**\n     * The connection is already in listening mode.\n     */\n    ConnectionErrors[ConnectionErrors[\"AlreadyListening\"] = 3] = \"AlreadyListening\";\n})(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));\nclass ConnectionError extends Error {\n    constructor(code, message) {\n        super(message);\n        this.code = code;\n        Object.setPrototypeOf(this, ConnectionError.prototype);\n    }\n}\nexports.ConnectionError = ConnectionError;\nvar ConnectionStrategy;\n(function (ConnectionStrategy) {\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.func(candidate.cancelUndispatched);\n    }\n    ConnectionStrategy.is = is;\n})(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));\nvar CancellationReceiverStrategy;\n(function (CancellationReceiverStrategy) {\n    CancellationReceiverStrategy.Message = Object.freeze({\n        createCancellationTokenSource(_) {\n            return new cancellation_1.CancellationTokenSource();\n        }\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.func(candidate.createCancellationTokenSource);\n    }\n    CancellationReceiverStrategy.is = is;\n})(CancellationReceiverStrategy = exports.CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = {}));\nvar CancellationSenderStrategy;\n(function (CancellationSenderStrategy) {\n    CancellationSenderStrategy.Message = Object.freeze({\n        sendCancellation(conn, id) {\n            conn.sendNotification(CancelNotification.type, { id });\n        },\n        cleanup(_) { }\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);\n    }\n    CancellationSenderStrategy.is = is;\n})(CancellationSenderStrategy = exports.CancellationSenderStrategy || (exports.CancellationSenderStrategy = {}));\nvar CancellationStrategy;\n(function (CancellationStrategy) {\n    CancellationStrategy.Message = Object.freeze({\n        receiver: CancellationReceiverStrategy.Message,\n        sender: CancellationSenderStrategy.Message\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);\n    }\n    CancellationStrategy.is = is;\n})(CancellationStrategy = exports.CancellationStrategy || (exports.CancellationStrategy = {}));\nvar ConnectionOptions;\n(function (ConnectionOptions) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy));\n    }\n    ConnectionOptions.is = is;\n})(ConnectionOptions = exports.ConnectionOptions || (exports.ConnectionOptions = {}));\nvar ConnectionState;\n(function (ConnectionState) {\n    ConnectionState[ConnectionState[\"New\"] = 1] = \"New\";\n    ConnectionState[ConnectionState[\"Listening\"] = 2] = \"Listening\";\n    ConnectionState[ConnectionState[\"Closed\"] = 3] = \"Closed\";\n    ConnectionState[ConnectionState[\"Disposed\"] = 4] = \"Disposed\";\n})(ConnectionState || (ConnectionState = {}));\nfunction createMessageConnection(messageReader, messageWriter, _logger, options) {\n    const logger = _logger !== undefined ? _logger : exports.NullLogger;\n    let sequenceNumber = 0;\n    let notificationSquenceNumber = 0;\n    let unknownResponseSquenceNumber = 0;\n    const version = '2.0';\n    let starRequestHandler = undefined;\n    const requestHandlers = Object.create(null);\n    let starNotificationHandler = undefined;\n    const notificationHandlers = Object.create(null);\n    const progressHandlers = new Map();\n    let timer;\n    let messageQueue = new linkedMap_1.LinkedMap();\n    let responsePromises = Object.create(null);\n    let requestTokens = Object.create(null);\n    let trace = Trace.Off;\n    let traceFormat = TraceFormat.Text;\n    let tracer;\n    let state = ConnectionState.New;\n    const errorEmitter = new events_1.Emitter();\n    const closeEmitter = new events_1.Emitter();\n    const unhandledNotificationEmitter = new events_1.Emitter();\n    const unhandledProgressEmitter = new events_1.Emitter();\n    const disposeEmitter = new events_1.Emitter();\n    const cancellationStrategy = (options && options.cancellationStrategy) ? options.cancellationStrategy : CancellationStrategy.Message;\n    function createRequestQueueKey(id) {\n        if (id === null) {\n            throw new Error(`Can't send requests with id null since the response can't be correlated.`);\n        }\n        return 'req-' + id.toString();\n    }\n    function createResponseQueueKey(id) {\n        if (id === null) {\n            return 'res-unknown-' + (++unknownResponseSquenceNumber).toString();\n        }\n        else {\n            return 'res-' + id.toString();\n        }\n    }\n    function createNotificationQueueKey() {\n        return 'not-' + (++notificationSquenceNumber).toString();\n    }\n    function addMessageToQueue(queue, message) {\n        if (messages_1.isRequestMessage(message)) {\n            queue.set(createRequestQueueKey(message.id), message);\n        }\n        else if (messages_1.isResponseMessage(message)) {\n            queue.set(createResponseQueueKey(message.id), message);\n        }\n        else {\n            queue.set(createNotificationQueueKey(), message);\n        }\n    }\n    function cancelUndispatched(_message) {\n        return undefined;\n    }\n    function isListening() {\n        return state === ConnectionState.Listening;\n    }\n    function isClosed() {\n        return state === ConnectionState.Closed;\n    }\n    function isDisposed() {\n        return state === ConnectionState.Disposed;\n    }\n    function closeHandler() {\n        if (state === ConnectionState.New || state === ConnectionState.Listening) {\n            state = ConnectionState.Closed;\n            closeEmitter.fire(undefined);\n        }\n        // If the connection is disposed don't sent close events.\n    }\n    function readErrorHandler(error) {\n        errorEmitter.fire([error, undefined, undefined]);\n    }\n    function writeErrorHandler(data) {\n        errorEmitter.fire(data);\n    }\n    messageReader.onClose(closeHandler);\n    messageReader.onError(readErrorHandler);\n    messageWriter.onClose(closeHandler);\n    messageWriter.onError(writeErrorHandler);\n    function triggerMessageQueue() {\n        if (timer || messageQueue.size === 0) {\n            return;\n        }\n        timer = ral_1.default().timer.setImmediate(() => {\n            timer = undefined;\n            processMessageQueue();\n        });\n    }\n    function processMessageQueue() {\n        if (messageQueue.size === 0) {\n            return;\n        }\n        const message = messageQueue.shift();\n        try {\n            if (messages_1.isRequestMessage(message)) {\n                handleRequest(message);\n            }\n            else if (messages_1.isNotificationMessage(message)) {\n                handleNotification(message);\n            }\n            else if (messages_1.isResponseMessage(message)) {\n                handleResponse(message);\n            }\n            else {\n                handleInvalidMessage(message);\n            }\n        }\n        finally {\n            triggerMessageQueue();\n        }\n    }\n    const callback = (message) => {\n        try {\n            // We have received a cancellation message. Check if the message is still in the queue\n            // and cancel it if allowed to do so.\n            if (messages_1.isNotificationMessage(message) && message.method === CancelNotification.type.method) {\n                const key = createRequestQueueKey(message.params.id);\n                const toCancel = messageQueue.get(key);\n                if (messages_1.isRequestMessage(toCancel)) {\n                    const strategy = options === null || options === void 0 ? void 0 : options.connectionStrategy;\n                    const response = (strategy && strategy.cancelUndispatched) ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);\n                    if (response && (response.error !== undefined || response.result !== undefined)) {\n                        messageQueue.delete(key);\n                        response.id = toCancel.id;\n                        traceSendingResponse(response, message.method, Date.now());\n                        messageWriter.write(response);\n                        return;\n                    }\n                }\n            }\n            addMessageToQueue(messageQueue, message);\n        }\n        finally {\n            triggerMessageQueue();\n        }\n    };\n    function handleRequest(requestMessage) {\n        if (isDisposed()) {\n            // we return here silently since we fired an event when the\n            // connection got disposed.\n            return;\n        }\n        function reply(resultOrError, method, startTime) {\n            const message = {\n                jsonrpc: version,\n                id: requestMessage.id\n            };\n            if (resultOrError instanceof messages_1.ResponseError) {\n                message.error = resultOrError.toJson();\n            }\n            else {\n                message.result = resultOrError === undefined ? null : resultOrError;\n            }\n            traceSendingResponse(message, method, startTime);\n            messageWriter.write(message);\n        }\n        function replyError(error, method, startTime) {\n            const message = {\n                jsonrpc: version,\n                id: requestMessage.id,\n                error: error.toJson()\n            };\n            traceSendingResponse(message, method, startTime);\n            messageWriter.write(message);\n        }\n        function replySuccess(result, method, startTime) {\n            // The JSON RPC defines that a response must either have a result or an error\n            // So we can't treat undefined as a valid response result.\n            if (result === undefined) {\n                result = null;\n            }\n            const message = {\n                jsonrpc: version,\n                id: requestMessage.id,\n                result: result\n            };\n            traceSendingResponse(message, method, startTime);\n            messageWriter.write(message);\n        }\n        traceReceivedRequest(requestMessage);\n        const element = requestHandlers[requestMessage.method];\n        let type;\n        let requestHandler;\n        if (element) {\n            type = element.type;\n            requestHandler = element.handler;\n        }\n        const startTime = Date.now();\n        if (requestHandler || starRequestHandler) {\n            const tokenKey = String(requestMessage.id);\n            const cancellationSource = cancellationStrategy.receiver.createCancellationTokenSource(tokenKey);\n            requestTokens[tokenKey] = cancellationSource;\n            try {\n                let handlerResult;\n                if (requestHandler) {\n                    if (requestMessage.params === undefined) {\n                        if (type !== undefined && type.numberOfParams !== 0) {\n                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but recevied none.`), requestMessage.method, startTime);\n                            return;\n                        }\n                        handlerResult = requestHandler(cancellationSource.token);\n                    }\n                    else if (Array.isArray(requestMessage.params)) {\n                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byName) {\n                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);\n                            return;\n                        }\n                        handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);\n                    }\n                    else {\n                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {\n                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);\n                            return;\n                        }\n                        handlerResult = requestHandler(requestMessage.params, cancellationSource.token);\n                    }\n                }\n                else if (starRequestHandler) {\n                    handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);\n                }\n                const promise = handlerResult;\n                if (!handlerResult) {\n                    delete requestTokens[tokenKey];\n                    replySuccess(handlerResult, requestMessage.method, startTime);\n                }\n                else if (promise.then) {\n                    promise.then((resultOrError) => {\n                        delete requestTokens[tokenKey];\n                        reply(resultOrError, requestMessage.method, startTime);\n                    }, error => {\n                        delete requestTokens[tokenKey];\n                        if (error instanceof messages_1.ResponseError) {\n                            replyError(error, requestMessage.method, startTime);\n                        }\n                        else if (error && Is.string(error.message)) {\n                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);\n                        }\n                        else {\n                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);\n                        }\n                    });\n                }\n                else {\n                    delete requestTokens[tokenKey];\n                    reply(handlerResult, requestMessage.method, startTime);\n                }\n            }\n            catch (error) {\n                delete requestTokens[tokenKey];\n                if (error instanceof messages_1.ResponseError) {\n                    reply(error, requestMessage.method, startTime);\n                }\n                else if (error && Is.string(error.message)) {\n                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);\n                }\n                else {\n                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);\n                }\n            }\n        }\n        else {\n            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);\n        }\n    }\n    function handleResponse(responseMessage) {\n        if (isDisposed()) {\n            // See handle request.\n            return;\n        }\n        if (responseMessage.id === null) {\n            if (responseMessage.error) {\n                logger.error(`Received response message without id: Error is: \\n${JSON.stringify(responseMessage.error, undefined, 4)}`);\n            }\n            else {\n                logger.error(`Received response message without id. No further error information provided.`);\n            }\n        }\n        else {\n            const key = String(responseMessage.id);\n            const responsePromise = responsePromises[key];\n            traceReceivedResponse(responseMessage, responsePromise);\n            if (responsePromise) {\n                delete responsePromises[key];\n                try {\n                    if (responseMessage.error) {\n                        const error = responseMessage.error;\n                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));\n                    }\n                    else if (responseMessage.result !== undefined) {\n                        responsePromise.resolve(responseMessage.result);\n                    }\n                    else {\n                        throw new Error('Should never happen.');\n                    }\n                }\n                catch (error) {\n                    if (error.message) {\n                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);\n                    }\n                    else {\n                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);\n                    }\n                }\n            }\n        }\n    }\n    function handleNotification(message) {\n        if (isDisposed()) {\n            // See handle request.\n            return;\n        }\n        let type = undefined;\n        let notificationHandler;\n        if (message.method === CancelNotification.type.method) {\n            notificationHandler = (params) => {\n                const id = params.id;\n                const source = requestTokens[String(id)];\n                if (source) {\n                    source.cancel();\n                }\n            };\n        }\n        else {\n            const element = notificationHandlers[message.method];\n            if (element) {\n                notificationHandler = element.handler;\n                type = element.type;\n            }\n        }\n        if (notificationHandler || starNotificationHandler) {\n            try {\n                traceReceivedNotification(message);\n                if (notificationHandler) {\n                    if (message.params === undefined) {\n                        if (type !== undefined) {\n                            if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {\n                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but recevied none.`);\n                            }\n                        }\n                        notificationHandler();\n                    }\n                    else if (Array.isArray(message.params)) {\n                        if (type !== undefined) {\n                            if (type.parameterStructures === messages_1.ParameterStructures.byName) {\n                                logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);\n                            }\n                            if (type.numberOfParams !== message.params.length) {\n                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${message.params.length} argumennts`);\n                            }\n                        }\n                        notificationHandler(...message.params);\n                    }\n                    else {\n                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {\n                            logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);\n                        }\n                        notificationHandler(message.params);\n                    }\n                }\n                else if (starNotificationHandler) {\n                    starNotificationHandler(message.method, message.params);\n                }\n            }\n            catch (error) {\n                if (error.message) {\n                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);\n                }\n                else {\n                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);\n                }\n            }\n        }\n        else {\n            unhandledNotificationEmitter.fire(message);\n        }\n    }\n    function handleInvalidMessage(message) {\n        if (!message) {\n            logger.error('Received empty message.');\n            return;\n        }\n        logger.error(`Received message which is neither a response nor a notification message:\\n${JSON.stringify(message, null, 4)}`);\n        // Test whether we find an id to reject the promise\n        const responseMessage = message;\n        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {\n            const key = String(responseMessage.id);\n            const responseHandler = responsePromises[key];\n            if (responseHandler) {\n                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));\n            }\n        }\n    }\n    function traceSendingRequest(message) {\n        if (trace === Trace.Off || !tracer) {\n            return;\n        }\n        if (traceFormat === TraceFormat.Text) {\n            let data = undefined;\n            if (trace === Trace.Verbose && message.params) {\n                data = `Params: ${JSON.stringify(message.params, null, 4)}\\n\\n`;\n            }\n            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);\n        }\n        else {\n            logLSPMessage('send-request', message);\n        }\n    }\n    function traceSendingNotification(message) {\n        if (trace === Trace.Off || !tracer) {\n            return;\n        }\n        if (traceFormat === TraceFormat.Text) {\n            let data = undefined;\n            if (trace === Trace.Verbose) {\n                if (message.params) {\n                    data = `Params: ${JSON.stringify(message.params, null, 4)}\\n\\n`;\n                }\n                else {\n                    data = 'No parameters provided.\\n\\n';\n                }\n            }\n            tracer.log(`Sending notification '${message.method}'.`, data);\n        }\n        else {\n            logLSPMessage('send-notification', message);\n        }\n    }\n    function traceSendingResponse(message, method, startTime) {\n        if (trace === Trace.Off || !tracer) {\n            return;\n        }\n        if (traceFormat === TraceFormat.Text) {\n            let data = undefined;\n            if (trace === Trace.Verbose) {\n                if (message.error && message.error.data) {\n                    data = `Error data: ${JSON.stringify(message.error.data, null, 4)}\\n\\n`;\n                }\n                else {\n                    if (message.result) {\n                        data = `Result: ${JSON.stringify(message.result, null, 4)}\\n\\n`;\n                    }\n                    else if (message.error === undefined) {\n                        data = 'No result returned.\\n\\n';\n                    }\n                }\n            }\n            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);\n        }\n        else {\n            logLSPMessage('send-response', message);\n        }\n    }\n    function traceReceivedRequest(message) {\n        if (trace === Trace.Off || !tracer) {\n            return;\n        }\n        if (traceFormat === TraceFormat.Text) {\n            let data = undefined;\n            if (trace === Trace.Verbose && message.params) {\n                data = `Params: ${JSON.stringify(message.params, null, 4)}\\n\\n`;\n            }\n            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);\n        }\n        else {\n            logLSPMessage('receive-request', message);\n        }\n    }\n    function traceReceivedNotification(message) {\n        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {\n            return;\n        }\n        if (traceFormat === TraceFormat.Text) {\n            let data = undefined;\n            if (trace === Trace.Verbose) {\n                if (message.params) {\n                    data = `Params: ${JSON.stringify(message.params, null, 4)}\\n\\n`;\n                }\n                else {\n                    data = 'No parameters provided.\\n\\n';\n                }\n            }\n            tracer.log(`Received notification '${message.method}'.`, data);\n        }\n        else {\n            logLSPMessage('receive-notification', message);\n        }\n    }\n    function traceReceivedResponse(message, responsePromise) {\n        if (trace === Trace.Off || !tracer) {\n            return;\n        }\n        if (traceFormat === TraceFormat.Text) {\n            let data = undefined;\n            if (trace === Trace.Verbose) {\n                if (message.error && message.error.data) {\n                    data = `Error data: ${JSON.stringify(message.error.data, null, 4)}\\n\\n`;\n                }\n                else {\n                    if (message.result) {\n                        data = `Result: ${JSON.stringify(message.result, null, 4)}\\n\\n`;\n                    }\n                    else if (message.error === undefined) {\n                        data = 'No result returned.\\n\\n';\n                    }\n                }\n            }\n            if (responsePromise) {\n                const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';\n                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);\n            }\n            else {\n                tracer.log(`Received response ${message.id} without active response promise.`, data);\n            }\n        }\n        else {\n            logLSPMessage('receive-response', message);\n        }\n    }\n    function logLSPMessage(type, message) {\n        if (!tracer || trace === Trace.Off) {\n            return;\n        }\n        const lspMessage = {\n            isLSPMessage: true,\n            type,\n            message,\n            timestamp: Date.now()\n        };\n        tracer.log(lspMessage);\n    }\n    function throwIfClosedOrDisposed() {\n        if (isClosed()) {\n            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');\n        }\n        if (isDisposed()) {\n            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');\n        }\n    }\n    function throwIfListening() {\n        if (isListening()) {\n            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');\n        }\n    }\n    function throwIfNotListening() {\n        if (!isListening()) {\n            throw new Error('Call listen() first.');\n        }\n    }\n    function undefinedToNull(param) {\n        if (param === undefined) {\n            return null;\n        }\n        else {\n            return param;\n        }\n    }\n    function nullToUndefined(param) {\n        if (param === null) {\n            return undefined;\n        }\n        else {\n            return param;\n        }\n    }\n    function isNamedParam(param) {\n        return param !== undefined && param !== null && !Array.isArray(param) && typeof param === 'object';\n    }\n    function computeSingleParam(parameterStructures, param) {\n        switch (parameterStructures) {\n            case messages_1.ParameterStructures.auto:\n                if (isNamedParam(param)) {\n                    return nullToUndefined(param);\n                }\n                else {\n                    return [undefinedToNull(param)];\n                }\n                break;\n            case messages_1.ParameterStructures.byName:\n                if (!isNamedParam(param)) {\n                    throw new Error(`Recevied parameters by name but param is not an object literal.`);\n                }\n                return nullToUndefined(param);\n            case messages_1.ParameterStructures.byPosition:\n                return [undefinedToNull(param)];\n            default:\n                throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);\n        }\n    }\n    function computeMessageParams(type, params) {\n        let result;\n        const numberOfParams = type.numberOfParams;\n        switch (numberOfParams) {\n            case 0:\n                result = undefined;\n                break;\n            case 1:\n                result = computeSingleParam(type.parameterStructures, params[0]);\n                break;\n            default:\n                result = [];\n                for (let i = 0; i < params.length && i < numberOfParams; i++) {\n                    result.push(undefinedToNull(params[i]));\n                }\n                if (params.length < numberOfParams) {\n                    for (let i = params.length; i < numberOfParams; i++) {\n                        result.push(null);\n                    }\n                }\n                break;\n        }\n        return result;\n    }\n    const connection = {\n        sendNotification: (type, ...args) => {\n            throwIfClosedOrDisposed();\n            let method;\n            let messageParams;\n            if (Is.string(type)) {\n                method = type;\n                const first = args[0];\n                let paramStart = 0;\n                let parameterStructures = messages_1.ParameterStructures.auto;\n                if (messages_1.ParameterStructures.is(first)) {\n                    paramStart = 1;\n                    parameterStructures = first;\n                }\n                let paramEnd = args.length;\n                const numberOfParams = paramEnd - paramStart;\n                switch (numberOfParams) {\n                    case 0:\n                        messageParams = undefined;\n                        break;\n                    case 1:\n                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);\n                        break;\n                    default:\n                        if (parameterStructures === messages_1.ParameterStructures.byName) {\n                            throw new Error(`Recevied ${numberOfParams} parameters for 'by Name' notification parameter structure.`);\n                        }\n                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));\n                        break;\n                }\n            }\n            else {\n                const params = args;\n                method = type.method;\n                messageParams = computeMessageParams(type, params);\n            }\n            const notificationMessage = {\n                jsonrpc: version,\n                method: method,\n                params: messageParams\n            };\n            traceSendingNotification(notificationMessage);\n            messageWriter.write(notificationMessage);\n        },\n        onNotification: (type, handler) => {\n            throwIfClosedOrDisposed();\n            let method;\n            if (Is.func(type)) {\n                starNotificationHandler = type;\n            }\n            else if (handler) {\n                if (Is.string(type)) {\n                    method = type;\n                    notificationHandlers[type] = { type: undefined, handler };\n                }\n                else {\n                    method = type.method;\n                    notificationHandlers[type.method] = { type, handler };\n                }\n            }\n            return {\n                dispose: () => {\n                    if (method !== undefined) {\n                        delete notificationHandlers[method];\n                    }\n                    else {\n                        starNotificationHandler = undefined;\n                    }\n                }\n            };\n        },\n        onProgress: (_type, token, handler) => {\n            if (progressHandlers.has(token)) {\n                throw new Error(`Progress handler for token ${token} already registered`);\n            }\n            progressHandlers.set(token, handler);\n            return {\n                dispose: () => {\n                    progressHandlers.delete(token);\n                }\n            };\n        },\n        sendProgress: (_type, token, value) => {\n            connection.sendNotification(ProgressNotification.type, { token, value });\n        },\n        onUnhandledProgress: unhandledProgressEmitter.event,\n        sendRequest: (type, ...args) => {\n            throwIfClosedOrDisposed();\n            throwIfNotListening();\n            let method;\n            let messageParams;\n            let token = undefined;\n            if (Is.string(type)) {\n                method = type;\n                const first = args[0];\n                const last = args[args.length - 1];\n                let paramStart = 0;\n                let parameterStructures = messages_1.ParameterStructures.auto;\n                if (messages_1.ParameterStructures.is(first)) {\n                    paramStart = 1;\n                    parameterStructures = first;\n                }\n                let paramEnd = args.length;\n                if (cancellation_1.CancellationToken.is(last)) {\n                    paramEnd = paramEnd - 1;\n                    token = last;\n                }\n                const numberOfParams = paramEnd - paramStart;\n                switch (numberOfParams) {\n                    case 0:\n                        messageParams = undefined;\n                        break;\n                    case 1:\n                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);\n                        break;\n                    default:\n                        if (parameterStructures === messages_1.ParameterStructures.byName) {\n                            throw new Error(`Recevied ${numberOfParams} parameters for 'by Name' request parameter structure.`);\n                        }\n                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));\n                        break;\n                }\n            }\n            else {\n                const params = args;\n                method = type.method;\n                messageParams = computeMessageParams(type, params);\n                const numberOfParams = type.numberOfParams;\n                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;\n            }\n            const id = sequenceNumber++;\n            let disposable;\n            if (token) {\n                disposable = token.onCancellationRequested(() => {\n                    cancellationStrategy.sender.sendCancellation(connection, id);\n                });\n            }\n            const result = new Promise((resolve, reject) => {\n                const requestMessage = {\n                    jsonrpc: version,\n                    id: id,\n                    method: method,\n                    params: messageParams\n                };\n                const resolveWithCleanup = (r) => {\n                    resolve(r);\n                    cancellationStrategy.sender.cleanup(id);\n                    disposable === null || disposable === void 0 ? void 0 : disposable.dispose();\n                };\n                const rejectWithCleanup = (r) => {\n                    reject(r);\n                    cancellationStrategy.sender.cleanup(id);\n                    disposable === null || disposable === void 0 ? void 0 : disposable.dispose();\n                };\n                let responsePromise = { method: method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };\n                traceSendingRequest(requestMessage);\n                try {\n                    messageWriter.write(requestMessage);\n                }\n                catch (e) {\n                    // Writing the message failed. So we need to reject the promise.\n                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, e.message ? e.message : 'Unknown reason'));\n                    responsePromise = null;\n                }\n                if (responsePromise) {\n                    responsePromises[String(id)] = responsePromise;\n                }\n            });\n            return result;\n        },\n        onRequest: (type, handler) => {\n            throwIfClosedOrDisposed();\n            let method = null;\n            if (StarRequestHandler.is(type)) {\n                method = undefined;\n                starRequestHandler = type;\n            }\n            else if (Is.string(type)) {\n                method = null;\n                if (handler !== undefined) {\n                    method = type;\n                    requestHandlers[type] = { handler: handler, type: undefined };\n                }\n            }\n            else {\n                if (handler !== undefined) {\n                    method = type.method;\n                    requestHandlers[type.method] = { type, handler };\n                }\n            }\n            return {\n                dispose: () => {\n                    if (method === null) {\n                        return;\n                    }\n                    if (method !== undefined) {\n                        delete requestHandlers[method];\n                    }\n                    else {\n                        starRequestHandler = undefined;\n                    }\n                }\n            };\n        },\n        trace: (_value, _tracer, sendNotificationOrTraceOptions) => {\n            let _sendNotification = false;\n            let _traceFormat = TraceFormat.Text;\n            if (sendNotificationOrTraceOptions !== undefined) {\n                if (Is.boolean(sendNotificationOrTraceOptions)) {\n                    _sendNotification = sendNotificationOrTraceOptions;\n                }\n                else {\n                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;\n                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;\n                }\n            }\n            trace = _value;\n            traceFormat = _traceFormat;\n            if (trace === Trace.Off) {\n                tracer = undefined;\n            }\n            else {\n                tracer = _tracer;\n            }\n            if (_sendNotification && !isClosed() && !isDisposed()) {\n                connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });\n            }\n        },\n        onError: errorEmitter.event,\n        onClose: closeEmitter.event,\n        onUnhandledNotification: unhandledNotificationEmitter.event,\n        onDispose: disposeEmitter.event,\n        end: () => {\n            messageWriter.end();\n        },\n        dispose: () => {\n            if (isDisposed()) {\n                return;\n            }\n            state = ConnectionState.Disposed;\n            disposeEmitter.fire(undefined);\n            const error = new Error('Connection got disposed.');\n            Object.keys(responsePromises).forEach((key) => {\n                responsePromises[key].reject(error);\n            });\n            responsePromises = Object.create(null);\n            requestTokens = Object.create(null);\n            messageQueue = new linkedMap_1.LinkedMap();\n            // Test for backwards compatibility\n            if (Is.func(messageWriter.dispose)) {\n                messageWriter.dispose();\n            }\n            if (Is.func(messageReader.dispose)) {\n                messageReader.dispose();\n            }\n        },\n        listen: () => {\n            throwIfClosedOrDisposed();\n            throwIfListening();\n            state = ConnectionState.Listening;\n            messageReader.listen(callback);\n        },\n        inspect: () => {\n            // eslint-disable-next-line no-console\n            ral_1.default().console.log('inspect');\n        }\n    };\n    connection.onNotification(LogTraceNotification.type, (params) => {\n        if (trace === Trace.Off || !tracer) {\n            return;\n        }\n        tracer.log(params.message, trace === Trace.Verbose ? params.verbose : undefined);\n    });\n    connection.onNotification(ProgressNotification.type, (params) => {\n        const handler = progressHandlers.get(params.token);\n        if (handler) {\n            handler(params.value);\n        }\n        else {\n            unhandledProgressEmitter.fire(params);\n        }\n    });\n    return connection;\n}\nexports.createMessageConnection = createMessageConnection;\n//# sourceMappingURL=connection.js.map",
      "start": 1706896525394,
      "end": 1706896525443,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1706896525443,
      "end": 1706896525443,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as connection } from \"\\u0000D:/Programming/templates/KPIcopy/node_modules/vscode-jsonrpc/lib/common/connection.js?commonjs-exports\";\nimport require$$0 from \"\\u0000D:/Programming/templates/KPIcopy/node_modules/vscode-jsonrpc/lib/common/ral.js?commonjs-proxy\";\nimport { __require as require$$1 } from \"\\u0000D:/Programming/templates/KPIcopy/node_modules/vscode-jsonrpc/lib/common/is.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000D:/Programming/templates/KPIcopy/node_modules/vscode-jsonrpc/lib/common/messages.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000D:/Programming/templates/KPIcopy/node_modules/vscode-jsonrpc/lib/common/linkedMap.js?commonjs-wrapped\";\nimport require$$4 from \"\\u0000D:/Programming/templates/KPIcopy/node_modules/vscode-jsonrpc/lib/common/events.js?commonjs-proxy\";\nimport { __require as require$$5 } from \"\\u0000D:/Programming/templates/KPIcopy/node_modules/vscode-jsonrpc/lib/common/cancellation.js?commonjs-wrapped\";\n\nvar hasRequiredConnection;\n\nfunction requireConnection () {\n\tif (hasRequiredConnection) return connection;\n\thasRequiredConnection = 1;\n\t(function (exports) {\n\t\t\"use strict\";\n\t\t/* --------------------------------------------------------------------------------------------\n\t\t * Copyright (c) Microsoft Corporation. All rights reserved.\n\t\t * Licensed under the MIT License. See License.txt in the project root for license information.\n\t\t * ------------------------------------------------------------------------------------------ */\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\texports.createMessageConnection = exports.ConnectionOptions = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.Trace = exports.NullLogger = exports.ProgressType = void 0;\n\t\tconst ral_1 = require$$0;\n\t\tconst Is = require$$1();\n\t\tconst messages_1 = require$$2();\n\t\tconst linkedMap_1 = require$$3();\n\t\tconst events_1 = require$$4;\n\t\tconst cancellation_1 = require$$5();\n\t\tvar CancelNotification;\n\t\t(function (CancelNotification) {\n\t\t    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');\n\t\t})(CancelNotification || (CancelNotification = {}));\n\t\tvar ProgressNotification;\n\t\t(function (ProgressNotification) {\n\t\t    ProgressNotification.type = new messages_1.NotificationType('$/progress');\n\t\t})(ProgressNotification || (ProgressNotification = {}));\n\t\tclass ProgressType {\n\t\t    constructor() {\n\t\t    }\n\t\t}\n\t\texports.ProgressType = ProgressType;\n\t\tvar StarRequestHandler;\n\t\t(function (StarRequestHandler) {\n\t\t    function is(value) {\n\t\t        return Is.func(value);\n\t\t    }\n\t\t    StarRequestHandler.is = is;\n\t\t})(StarRequestHandler || (StarRequestHandler = {}));\n\t\texports.NullLogger = Object.freeze({\n\t\t    error: () => { },\n\t\t    warn: () => { },\n\t\t    info: () => { },\n\t\t    log: () => { }\n\t\t});\n\t\tvar Trace;\n\t\t(function (Trace) {\n\t\t    Trace[Trace[\"Off\"] = 0] = \"Off\";\n\t\t    Trace[Trace[\"Messages\"] = 1] = \"Messages\";\n\t\t    Trace[Trace[\"Verbose\"] = 2] = \"Verbose\";\n\t\t})(Trace = exports.Trace || (exports.Trace = {}));\n\t\t(function (Trace) {\n\t\t    function fromString(value) {\n\t\t        if (!Is.string(value)) {\n\t\t            return Trace.Off;\n\t\t        }\n\t\t        value = value.toLowerCase();\n\t\t        switch (value) {\n\t\t            case 'off':\n\t\t                return Trace.Off;\n\t\t            case 'messages':\n\t\t                return Trace.Messages;\n\t\t            case 'verbose':\n\t\t                return Trace.Verbose;\n\t\t            default:\n\t\t                return Trace.Off;\n\t\t        }\n\t\t    }\n\t\t    Trace.fromString = fromString;\n\t\t    function toString(value) {\n\t\t        switch (value) {\n\t\t            case Trace.Off:\n\t\t                return 'off';\n\t\t            case Trace.Messages:\n\t\t                return 'messages';\n\t\t            case Trace.Verbose:\n\t\t                return 'verbose';\n\t\t            default:\n\t\t                return 'off';\n\t\t        }\n\t\t    }\n\t\t    Trace.toString = toString;\n\t\t})(Trace = exports.Trace || (exports.Trace = {}));\n\t\tvar TraceFormat;\n\t\t(function (TraceFormat) {\n\t\t    TraceFormat[\"Text\"] = \"text\";\n\t\t    TraceFormat[\"JSON\"] = \"json\";\n\t\t})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));\n\t\t(function (TraceFormat) {\n\t\t    function fromString(value) {\n\t\t        value = value.toLowerCase();\n\t\t        if (value === 'json') {\n\t\t            return TraceFormat.JSON;\n\t\t        }\n\t\t        else {\n\t\t            return TraceFormat.Text;\n\t\t        }\n\t\t    }\n\t\t    TraceFormat.fromString = fromString;\n\t\t})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));\n\t\tvar SetTraceNotification;\n\t\t(function (SetTraceNotification) {\n\t\t    SetTraceNotification.type = new messages_1.NotificationType('$/setTrace');\n\t\t})(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));\n\t\tvar LogTraceNotification;\n\t\t(function (LogTraceNotification) {\n\t\t    LogTraceNotification.type = new messages_1.NotificationType('$/logTrace');\n\t\t})(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));\n\t\tvar ConnectionErrors;\n\t\t(function (ConnectionErrors) {\n\t\t    /**\n\t\t     * The connection is closed.\n\t\t     */\n\t\t    ConnectionErrors[ConnectionErrors[\"Closed\"] = 1] = \"Closed\";\n\t\t    /**\n\t\t     * The connection got disposed.\n\t\t     */\n\t\t    ConnectionErrors[ConnectionErrors[\"Disposed\"] = 2] = \"Disposed\";\n\t\t    /**\n\t\t     * The connection is already in listening mode.\n\t\t     */\n\t\t    ConnectionErrors[ConnectionErrors[\"AlreadyListening\"] = 3] = \"AlreadyListening\";\n\t\t})(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));\n\t\tclass ConnectionError extends Error {\n\t\t    constructor(code, message) {\n\t\t        super(message);\n\t\t        this.code = code;\n\t\t        Object.setPrototypeOf(this, ConnectionError.prototype);\n\t\t    }\n\t\t}\n\t\texports.ConnectionError = ConnectionError;\n\t\tvar ConnectionStrategy;\n\t\t(function (ConnectionStrategy) {\n\t\t    function is(value) {\n\t\t        const candidate = value;\n\t\t        return candidate && Is.func(candidate.cancelUndispatched);\n\t\t    }\n\t\t    ConnectionStrategy.is = is;\n\t\t})(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));\n\t\tvar CancellationReceiverStrategy;\n\t\t(function (CancellationReceiverStrategy) {\n\t\t    CancellationReceiverStrategy.Message = Object.freeze({\n\t\t        createCancellationTokenSource(_) {\n\t\t            return new cancellation_1.CancellationTokenSource();\n\t\t        }\n\t\t    });\n\t\t    function is(value) {\n\t\t        const candidate = value;\n\t\t        return candidate && Is.func(candidate.createCancellationTokenSource);\n\t\t    }\n\t\t    CancellationReceiverStrategy.is = is;\n\t\t})(CancellationReceiverStrategy = exports.CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = {}));\n\t\tvar CancellationSenderStrategy;\n\t\t(function (CancellationSenderStrategy) {\n\t\t    CancellationSenderStrategy.Message = Object.freeze({\n\t\t        sendCancellation(conn, id) {\n\t\t            conn.sendNotification(CancelNotification.type, { id });\n\t\t        },\n\t\t        cleanup(_) { }\n\t\t    });\n\t\t    function is(value) {\n\t\t        const candidate = value;\n\t\t        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);\n\t\t    }\n\t\t    CancellationSenderStrategy.is = is;\n\t\t})(CancellationSenderStrategy = exports.CancellationSenderStrategy || (exports.CancellationSenderStrategy = {}));\n\t\tvar CancellationStrategy;\n\t\t(function (CancellationStrategy) {\n\t\t    CancellationStrategy.Message = Object.freeze({\n\t\t        receiver: CancellationReceiverStrategy.Message,\n\t\t        sender: CancellationSenderStrategy.Message\n\t\t    });\n\t\t    function is(value) {\n\t\t        const candidate = value;\n\t\t        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);\n\t\t    }\n\t\t    CancellationStrategy.is = is;\n\t\t})(CancellationStrategy = exports.CancellationStrategy || (exports.CancellationStrategy = {}));\n\t\tvar ConnectionOptions;\n\t\t(function (ConnectionOptions) {\n\t\t    function is(value) {\n\t\t        const candidate = value;\n\t\t        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy));\n\t\t    }\n\t\t    ConnectionOptions.is = is;\n\t\t})(ConnectionOptions = exports.ConnectionOptions || (exports.ConnectionOptions = {}));\n\t\tvar ConnectionState;\n\t\t(function (ConnectionState) {\n\t\t    ConnectionState[ConnectionState[\"New\"] = 1] = \"New\";\n\t\t    ConnectionState[ConnectionState[\"Listening\"] = 2] = \"Listening\";\n\t\t    ConnectionState[ConnectionState[\"Closed\"] = 3] = \"Closed\";\n\t\t    ConnectionState[ConnectionState[\"Disposed\"] = 4] = \"Disposed\";\n\t\t})(ConnectionState || (ConnectionState = {}));\n\t\tfunction createMessageConnection(messageReader, messageWriter, _logger, options) {\n\t\t    const logger = _logger !== undefined ? _logger : exports.NullLogger;\n\t\t    let sequenceNumber = 0;\n\t\t    let notificationSquenceNumber = 0;\n\t\t    let unknownResponseSquenceNumber = 0;\n\t\t    const version = '2.0';\n\t\t    let starRequestHandler = undefined;\n\t\t    const requestHandlers = Object.create(null);\n\t\t    let starNotificationHandler = undefined;\n\t\t    const notificationHandlers = Object.create(null);\n\t\t    const progressHandlers = new Map();\n\t\t    let timer;\n\t\t    let messageQueue = new linkedMap_1.LinkedMap();\n\t\t    let responsePromises = Object.create(null);\n\t\t    let requestTokens = Object.create(null);\n\t\t    let trace = Trace.Off;\n\t\t    let traceFormat = TraceFormat.Text;\n\t\t    let tracer;\n\t\t    let state = ConnectionState.New;\n\t\t    const errorEmitter = new events_1.Emitter();\n\t\t    const closeEmitter = new events_1.Emitter();\n\t\t    const unhandledNotificationEmitter = new events_1.Emitter();\n\t\t    const unhandledProgressEmitter = new events_1.Emitter();\n\t\t    const disposeEmitter = new events_1.Emitter();\n\t\t    const cancellationStrategy = (options && options.cancellationStrategy) ? options.cancellationStrategy : CancellationStrategy.Message;\n\t\t    function createRequestQueueKey(id) {\n\t\t        if (id === null) {\n\t\t            throw new Error(`Can't send requests with id null since the response can't be correlated.`);\n\t\t        }\n\t\t        return 'req-' + id.toString();\n\t\t    }\n\t\t    function createResponseQueueKey(id) {\n\t\t        if (id === null) {\n\t\t            return 'res-unknown-' + (++unknownResponseSquenceNumber).toString();\n\t\t        }\n\t\t        else {\n\t\t            return 'res-' + id.toString();\n\t\t        }\n\t\t    }\n\t\t    function createNotificationQueueKey() {\n\t\t        return 'not-' + (++notificationSquenceNumber).toString();\n\t\t    }\n\t\t    function addMessageToQueue(queue, message) {\n\t\t        if (messages_1.isRequestMessage(message)) {\n\t\t            queue.set(createRequestQueueKey(message.id), message);\n\t\t        }\n\t\t        else if (messages_1.isResponseMessage(message)) {\n\t\t            queue.set(createResponseQueueKey(message.id), message);\n\t\t        }\n\t\t        else {\n\t\t            queue.set(createNotificationQueueKey(), message);\n\t\t        }\n\t\t    }\n\t\t    function cancelUndispatched(_message) {\n\t\t        return undefined;\n\t\t    }\n\t\t    function isListening() {\n\t\t        return state === ConnectionState.Listening;\n\t\t    }\n\t\t    function isClosed() {\n\t\t        return state === ConnectionState.Closed;\n\t\t    }\n\t\t    function isDisposed() {\n\t\t        return state === ConnectionState.Disposed;\n\t\t    }\n\t\t    function closeHandler() {\n\t\t        if (state === ConnectionState.New || state === ConnectionState.Listening) {\n\t\t            state = ConnectionState.Closed;\n\t\t            closeEmitter.fire(undefined);\n\t\t        }\n\t\t        // If the connection is disposed don't sent close events.\n\t\t    }\n\t\t    function readErrorHandler(error) {\n\t\t        errorEmitter.fire([error, undefined, undefined]);\n\t\t    }\n\t\t    function writeErrorHandler(data) {\n\t\t        errorEmitter.fire(data);\n\t\t    }\n\t\t    messageReader.onClose(closeHandler);\n\t\t    messageReader.onError(readErrorHandler);\n\t\t    messageWriter.onClose(closeHandler);\n\t\t    messageWriter.onError(writeErrorHandler);\n\t\t    function triggerMessageQueue() {\n\t\t        if (timer || messageQueue.size === 0) {\n\t\t            return;\n\t\t        }\n\t\t        timer = ral_1.default().timer.setImmediate(() => {\n\t\t            timer = undefined;\n\t\t            processMessageQueue();\n\t\t        });\n\t\t    }\n\t\t    function processMessageQueue() {\n\t\t        if (messageQueue.size === 0) {\n\t\t            return;\n\t\t        }\n\t\t        const message = messageQueue.shift();\n\t\t        try {\n\t\t            if (messages_1.isRequestMessage(message)) {\n\t\t                handleRequest(message);\n\t\t            }\n\t\t            else if (messages_1.isNotificationMessage(message)) {\n\t\t                handleNotification(message);\n\t\t            }\n\t\t            else if (messages_1.isResponseMessage(message)) {\n\t\t                handleResponse(message);\n\t\t            }\n\t\t            else {\n\t\t                handleInvalidMessage(message);\n\t\t            }\n\t\t        }\n\t\t        finally {\n\t\t            triggerMessageQueue();\n\t\t        }\n\t\t    }\n\t\t    const callback = (message) => {\n\t\t        try {\n\t\t            // We have received a cancellation message. Check if the message is still in the queue\n\t\t            // and cancel it if allowed to do so.\n\t\t            if (messages_1.isNotificationMessage(message) && message.method === CancelNotification.type.method) {\n\t\t                const key = createRequestQueueKey(message.params.id);\n\t\t                const toCancel = messageQueue.get(key);\n\t\t                if (messages_1.isRequestMessage(toCancel)) {\n\t\t                    const strategy = options === null || options === void 0 ? void 0 : options.connectionStrategy;\n\t\t                    const response = (strategy && strategy.cancelUndispatched) ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);\n\t\t                    if (response && (response.error !== undefined || response.result !== undefined)) {\n\t\t                        messageQueue.delete(key);\n\t\t                        response.id = toCancel.id;\n\t\t                        traceSendingResponse(response, message.method, Date.now());\n\t\t                        messageWriter.write(response);\n\t\t                        return;\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t            addMessageToQueue(messageQueue, message);\n\t\t        }\n\t\t        finally {\n\t\t            triggerMessageQueue();\n\t\t        }\n\t\t    };\n\t\t    function handleRequest(requestMessage) {\n\t\t        if (isDisposed()) {\n\t\t            // we return here silently since we fired an event when the\n\t\t            // connection got disposed.\n\t\t            return;\n\t\t        }\n\t\t        function reply(resultOrError, method, startTime) {\n\t\t            const message = {\n\t\t                jsonrpc: version,\n\t\t                id: requestMessage.id\n\t\t            };\n\t\t            if (resultOrError instanceof messages_1.ResponseError) {\n\t\t                message.error = resultOrError.toJson();\n\t\t            }\n\t\t            else {\n\t\t                message.result = resultOrError === undefined ? null : resultOrError;\n\t\t            }\n\t\t            traceSendingResponse(message, method, startTime);\n\t\t            messageWriter.write(message);\n\t\t        }\n\t\t        function replyError(error, method, startTime) {\n\t\t            const message = {\n\t\t                jsonrpc: version,\n\t\t                id: requestMessage.id,\n\t\t                error: error.toJson()\n\t\t            };\n\t\t            traceSendingResponse(message, method, startTime);\n\t\t            messageWriter.write(message);\n\t\t        }\n\t\t        function replySuccess(result, method, startTime) {\n\t\t            // The JSON RPC defines that a response must either have a result or an error\n\t\t            // So we can't treat undefined as a valid response result.\n\t\t            if (result === undefined) {\n\t\t                result = null;\n\t\t            }\n\t\t            const message = {\n\t\t                jsonrpc: version,\n\t\t                id: requestMessage.id,\n\t\t                result: result\n\t\t            };\n\t\t            traceSendingResponse(message, method, startTime);\n\t\t            messageWriter.write(message);\n\t\t        }\n\t\t        traceReceivedRequest(requestMessage);\n\t\t        const element = requestHandlers[requestMessage.method];\n\t\t        let type;\n\t\t        let requestHandler;\n\t\t        if (element) {\n\t\t            type = element.type;\n\t\t            requestHandler = element.handler;\n\t\t        }\n\t\t        const startTime = Date.now();\n\t\t        if (requestHandler || starRequestHandler) {\n\t\t            const tokenKey = String(requestMessage.id);\n\t\t            const cancellationSource = cancellationStrategy.receiver.createCancellationTokenSource(tokenKey);\n\t\t            requestTokens[tokenKey] = cancellationSource;\n\t\t            try {\n\t\t                let handlerResult;\n\t\t                if (requestHandler) {\n\t\t                    if (requestMessage.params === undefined) {\n\t\t                        if (type !== undefined && type.numberOfParams !== 0) {\n\t\t                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but recevied none.`), requestMessage.method, startTime);\n\t\t                            return;\n\t\t                        }\n\t\t                        handlerResult = requestHandler(cancellationSource.token);\n\t\t                    }\n\t\t                    else if (Array.isArray(requestMessage.params)) {\n\t\t                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byName) {\n\t\t                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);\n\t\t                            return;\n\t\t                        }\n\t\t                        handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);\n\t\t                    }\n\t\t                    else {\n\t\t                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {\n\t\t                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);\n\t\t                            return;\n\t\t                        }\n\t\t                        handlerResult = requestHandler(requestMessage.params, cancellationSource.token);\n\t\t                    }\n\t\t                }\n\t\t                else if (starRequestHandler) {\n\t\t                    handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);\n\t\t                }\n\t\t                const promise = handlerResult;\n\t\t                if (!handlerResult) {\n\t\t                    delete requestTokens[tokenKey];\n\t\t                    replySuccess(handlerResult, requestMessage.method, startTime);\n\t\t                }\n\t\t                else if (promise.then) {\n\t\t                    promise.then((resultOrError) => {\n\t\t                        delete requestTokens[tokenKey];\n\t\t                        reply(resultOrError, requestMessage.method, startTime);\n\t\t                    }, error => {\n\t\t                        delete requestTokens[tokenKey];\n\t\t                        if (error instanceof messages_1.ResponseError) {\n\t\t                            replyError(error, requestMessage.method, startTime);\n\t\t                        }\n\t\t                        else if (error && Is.string(error.message)) {\n\t\t                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);\n\t\t                        }\n\t\t                        else {\n\t\t                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);\n\t\t                        }\n\t\t                    });\n\t\t                }\n\t\t                else {\n\t\t                    delete requestTokens[tokenKey];\n\t\t                    reply(handlerResult, requestMessage.method, startTime);\n\t\t                }\n\t\t            }\n\t\t            catch (error) {\n\t\t                delete requestTokens[tokenKey];\n\t\t                if (error instanceof messages_1.ResponseError) {\n\t\t                    reply(error, requestMessage.method, startTime);\n\t\t                }\n\t\t                else if (error && Is.string(error.message)) {\n\t\t                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);\n\t\t                }\n\t\t                else {\n\t\t                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        else {\n\t\t            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);\n\t\t        }\n\t\t    }\n\t\t    function handleResponse(responseMessage) {\n\t\t        if (isDisposed()) {\n\t\t            // See handle request.\n\t\t            return;\n\t\t        }\n\t\t        if (responseMessage.id === null) {\n\t\t            if (responseMessage.error) {\n\t\t                logger.error(`Received response message without id: Error is: \\n${JSON.stringify(responseMessage.error, undefined, 4)}`);\n\t\t            }\n\t\t            else {\n\t\t                logger.error(`Received response message without id. No further error information provided.`);\n\t\t            }\n\t\t        }\n\t\t        else {\n\t\t            const key = String(responseMessage.id);\n\t\t            const responsePromise = responsePromises[key];\n\t\t            traceReceivedResponse(responseMessage, responsePromise);\n\t\t            if (responsePromise) {\n\t\t                delete responsePromises[key];\n\t\t                try {\n\t\t                    if (responseMessage.error) {\n\t\t                        const error = responseMessage.error;\n\t\t                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));\n\t\t                    }\n\t\t                    else if (responseMessage.result !== undefined) {\n\t\t                        responsePromise.resolve(responseMessage.result);\n\t\t                    }\n\t\t                    else {\n\t\t                        throw new Error('Should never happen.');\n\t\t                    }\n\t\t                }\n\t\t                catch (error) {\n\t\t                    if (error.message) {\n\t\t                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);\n\t\t                    }\n\t\t                    else {\n\t\t                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t    function handleNotification(message) {\n\t\t        if (isDisposed()) {\n\t\t            // See handle request.\n\t\t            return;\n\t\t        }\n\t\t        let type = undefined;\n\t\t        let notificationHandler;\n\t\t        if (message.method === CancelNotification.type.method) {\n\t\t            notificationHandler = (params) => {\n\t\t                const id = params.id;\n\t\t                const source = requestTokens[String(id)];\n\t\t                if (source) {\n\t\t                    source.cancel();\n\t\t                }\n\t\t            };\n\t\t        }\n\t\t        else {\n\t\t            const element = notificationHandlers[message.method];\n\t\t            if (element) {\n\t\t                notificationHandler = element.handler;\n\t\t                type = element.type;\n\t\t            }\n\t\t        }\n\t\t        if (notificationHandler || starNotificationHandler) {\n\t\t            try {\n\t\t                traceReceivedNotification(message);\n\t\t                if (notificationHandler) {\n\t\t                    if (message.params === undefined) {\n\t\t                        if (type !== undefined) {\n\t\t                            if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {\n\t\t                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but recevied none.`);\n\t\t                            }\n\t\t                        }\n\t\t                        notificationHandler();\n\t\t                    }\n\t\t                    else if (Array.isArray(message.params)) {\n\t\t                        if (type !== undefined) {\n\t\t                            if (type.parameterStructures === messages_1.ParameterStructures.byName) {\n\t\t                                logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);\n\t\t                            }\n\t\t                            if (type.numberOfParams !== message.params.length) {\n\t\t                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${message.params.length} argumennts`);\n\t\t                            }\n\t\t                        }\n\t\t                        notificationHandler(...message.params);\n\t\t                    }\n\t\t                    else {\n\t\t                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {\n\t\t                            logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);\n\t\t                        }\n\t\t                        notificationHandler(message.params);\n\t\t                    }\n\t\t                }\n\t\t                else if (starNotificationHandler) {\n\t\t                    starNotificationHandler(message.method, message.params);\n\t\t                }\n\t\t            }\n\t\t            catch (error) {\n\t\t                if (error.message) {\n\t\t                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);\n\t\t                }\n\t\t                else {\n\t\t                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        else {\n\t\t            unhandledNotificationEmitter.fire(message);\n\t\t        }\n\t\t    }\n\t\t    function handleInvalidMessage(message) {\n\t\t        if (!message) {\n\t\t            logger.error('Received empty message.');\n\t\t            return;\n\t\t        }\n\t\t        logger.error(`Received message which is neither a response nor a notification message:\\n${JSON.stringify(message, null, 4)}`);\n\t\t        // Test whether we find an id to reject the promise\n\t\t        const responseMessage = message;\n\t\t        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {\n\t\t            const key = String(responseMessage.id);\n\t\t            const responseHandler = responsePromises[key];\n\t\t            if (responseHandler) {\n\t\t                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t    function traceSendingRequest(message) {\n\t\t        if (trace === Trace.Off || !tracer) {\n\t\t            return;\n\t\t        }\n\t\t        if (traceFormat === TraceFormat.Text) {\n\t\t            let data = undefined;\n\t\t            if (trace === Trace.Verbose && message.params) {\n\t\t                data = `Params: ${JSON.stringify(message.params, null, 4)}\\n\\n`;\n\t\t            }\n\t\t            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);\n\t\t        }\n\t\t        else {\n\t\t            logLSPMessage('send-request', message);\n\t\t        }\n\t\t    }\n\t\t    function traceSendingNotification(message) {\n\t\t        if (trace === Trace.Off || !tracer) {\n\t\t            return;\n\t\t        }\n\t\t        if (traceFormat === TraceFormat.Text) {\n\t\t            let data = undefined;\n\t\t            if (trace === Trace.Verbose) {\n\t\t                if (message.params) {\n\t\t                    data = `Params: ${JSON.stringify(message.params, null, 4)}\\n\\n`;\n\t\t                }\n\t\t                else {\n\t\t                    data = 'No parameters provided.\\n\\n';\n\t\t                }\n\t\t            }\n\t\t            tracer.log(`Sending notification '${message.method}'.`, data);\n\t\t        }\n\t\t        else {\n\t\t            logLSPMessage('send-notification', message);\n\t\t        }\n\t\t    }\n\t\t    function traceSendingResponse(message, method, startTime) {\n\t\t        if (trace === Trace.Off || !tracer) {\n\t\t            return;\n\t\t        }\n\t\t        if (traceFormat === TraceFormat.Text) {\n\t\t            let data = undefined;\n\t\t            if (trace === Trace.Verbose) {\n\t\t                if (message.error && message.error.data) {\n\t\t                    data = `Error data: ${JSON.stringify(message.error.data, null, 4)}\\n\\n`;\n\t\t                }\n\t\t                else {\n\t\t                    if (message.result) {\n\t\t                        data = `Result: ${JSON.stringify(message.result, null, 4)}\\n\\n`;\n\t\t                    }\n\t\t                    else if (message.error === undefined) {\n\t\t                        data = 'No result returned.\\n\\n';\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);\n\t\t        }\n\t\t        else {\n\t\t            logLSPMessage('send-response', message);\n\t\t        }\n\t\t    }\n\t\t    function traceReceivedRequest(message) {\n\t\t        if (trace === Trace.Off || !tracer) {\n\t\t            return;\n\t\t        }\n\t\t        if (traceFormat === TraceFormat.Text) {\n\t\t            let data = undefined;\n\t\t            if (trace === Trace.Verbose && message.params) {\n\t\t                data = `Params: ${JSON.stringify(message.params, null, 4)}\\n\\n`;\n\t\t            }\n\t\t            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);\n\t\t        }\n\t\t        else {\n\t\t            logLSPMessage('receive-request', message);\n\t\t        }\n\t\t    }\n\t\t    function traceReceivedNotification(message) {\n\t\t        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {\n\t\t            return;\n\t\t        }\n\t\t        if (traceFormat === TraceFormat.Text) {\n\t\t            let data = undefined;\n\t\t            if (trace === Trace.Verbose) {\n\t\t                if (message.params) {\n\t\t                    data = `Params: ${JSON.stringify(message.params, null, 4)}\\n\\n`;\n\t\t                }\n\t\t                else {\n\t\t                    data = 'No parameters provided.\\n\\n';\n\t\t                }\n\t\t            }\n\t\t            tracer.log(`Received notification '${message.method}'.`, data);\n\t\t        }\n\t\t        else {\n\t\t            logLSPMessage('receive-notification', message);\n\t\t        }\n\t\t    }\n\t\t    function traceReceivedResponse(message, responsePromise) {\n\t\t        if (trace === Trace.Off || !tracer) {\n\t\t            return;\n\t\t        }\n\t\t        if (traceFormat === TraceFormat.Text) {\n\t\t            let data = undefined;\n\t\t            if (trace === Trace.Verbose) {\n\t\t                if (message.error && message.error.data) {\n\t\t                    data = `Error data: ${JSON.stringify(message.error.data, null, 4)}\\n\\n`;\n\t\t                }\n\t\t                else {\n\t\t                    if (message.result) {\n\t\t                        data = `Result: ${JSON.stringify(message.result, null, 4)}\\n\\n`;\n\t\t                    }\n\t\t                    else if (message.error === undefined) {\n\t\t                        data = 'No result returned.\\n\\n';\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t            if (responsePromise) {\n\t\t                const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';\n\t\t                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);\n\t\t            }\n\t\t            else {\n\t\t                tracer.log(`Received response ${message.id} without active response promise.`, data);\n\t\t            }\n\t\t        }\n\t\t        else {\n\t\t            logLSPMessage('receive-response', message);\n\t\t        }\n\t\t    }\n\t\t    function logLSPMessage(type, message) {\n\t\t        if (!tracer || trace === Trace.Off) {\n\t\t            return;\n\t\t        }\n\t\t        const lspMessage = {\n\t\t            isLSPMessage: true,\n\t\t            type,\n\t\t            message,\n\t\t            timestamp: Date.now()\n\t\t        };\n\t\t        tracer.log(lspMessage);\n\t\t    }\n\t\t    function throwIfClosedOrDisposed() {\n\t\t        if (isClosed()) {\n\t\t            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');\n\t\t        }\n\t\t        if (isDisposed()) {\n\t\t            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');\n\t\t        }\n\t\t    }\n\t\t    function throwIfListening() {\n\t\t        if (isListening()) {\n\t\t            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');\n\t\t        }\n\t\t    }\n\t\t    function throwIfNotListening() {\n\t\t        if (!isListening()) {\n\t\t            throw new Error('Call listen() first.');\n\t\t        }\n\t\t    }\n\t\t    function undefinedToNull(param) {\n\t\t        if (param === undefined) {\n\t\t            return null;\n\t\t        }\n\t\t        else {\n\t\t            return param;\n\t\t        }\n\t\t    }\n\t\t    function nullToUndefined(param) {\n\t\t        if (param === null) {\n\t\t            return undefined;\n\t\t        }\n\t\t        else {\n\t\t            return param;\n\t\t        }\n\t\t    }\n\t\t    function isNamedParam(param) {\n\t\t        return param !== undefined && param !== null && !Array.isArray(param) && typeof param === 'object';\n\t\t    }\n\t\t    function computeSingleParam(parameterStructures, param) {\n\t\t        switch (parameterStructures) {\n\t\t            case messages_1.ParameterStructures.auto:\n\t\t                if (isNamedParam(param)) {\n\t\t                    return nullToUndefined(param);\n\t\t                }\n\t\t                else {\n\t\t                    return [undefinedToNull(param)];\n\t\t                }\n\t\t                break;\n\t\t            case messages_1.ParameterStructures.byName:\n\t\t                if (!isNamedParam(param)) {\n\t\t                    throw new Error(`Recevied parameters by name but param is not an object literal.`);\n\t\t                }\n\t\t                return nullToUndefined(param);\n\t\t            case messages_1.ParameterStructures.byPosition:\n\t\t                return [undefinedToNull(param)];\n\t\t            default:\n\t\t                throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);\n\t\t        }\n\t\t    }\n\t\t    function computeMessageParams(type, params) {\n\t\t        let result;\n\t\t        const numberOfParams = type.numberOfParams;\n\t\t        switch (numberOfParams) {\n\t\t            case 0:\n\t\t                result = undefined;\n\t\t                break;\n\t\t            case 1:\n\t\t                result = computeSingleParam(type.parameterStructures, params[0]);\n\t\t                break;\n\t\t            default:\n\t\t                result = [];\n\t\t                for (let i = 0; i < params.length && i < numberOfParams; i++) {\n\t\t                    result.push(undefinedToNull(params[i]));\n\t\t                }\n\t\t                if (params.length < numberOfParams) {\n\t\t                    for (let i = params.length; i < numberOfParams; i++) {\n\t\t                        result.push(null);\n\t\t                    }\n\t\t                }\n\t\t                break;\n\t\t        }\n\t\t        return result;\n\t\t    }\n\t\t    const connection = {\n\t\t        sendNotification: (type, ...args) => {\n\t\t            throwIfClosedOrDisposed();\n\t\t            let method;\n\t\t            let messageParams;\n\t\t            if (Is.string(type)) {\n\t\t                method = type;\n\t\t                const first = args[0];\n\t\t                let paramStart = 0;\n\t\t                let parameterStructures = messages_1.ParameterStructures.auto;\n\t\t                if (messages_1.ParameterStructures.is(first)) {\n\t\t                    paramStart = 1;\n\t\t                    parameterStructures = first;\n\t\t                }\n\t\t                let paramEnd = args.length;\n\t\t                const numberOfParams = paramEnd - paramStart;\n\t\t                switch (numberOfParams) {\n\t\t                    case 0:\n\t\t                        messageParams = undefined;\n\t\t                        break;\n\t\t                    case 1:\n\t\t                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);\n\t\t                        break;\n\t\t                    default:\n\t\t                        if (parameterStructures === messages_1.ParameterStructures.byName) {\n\t\t                            throw new Error(`Recevied ${numberOfParams} parameters for 'by Name' notification parameter structure.`);\n\t\t                        }\n\t\t                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));\n\t\t                        break;\n\t\t                }\n\t\t            }\n\t\t            else {\n\t\t                const params = args;\n\t\t                method = type.method;\n\t\t                messageParams = computeMessageParams(type, params);\n\t\t            }\n\t\t            const notificationMessage = {\n\t\t                jsonrpc: version,\n\t\t                method: method,\n\t\t                params: messageParams\n\t\t            };\n\t\t            traceSendingNotification(notificationMessage);\n\t\t            messageWriter.write(notificationMessage);\n\t\t        },\n\t\t        onNotification: (type, handler) => {\n\t\t            throwIfClosedOrDisposed();\n\t\t            let method;\n\t\t            if (Is.func(type)) {\n\t\t                starNotificationHandler = type;\n\t\t            }\n\t\t            else if (handler) {\n\t\t                if (Is.string(type)) {\n\t\t                    method = type;\n\t\t                    notificationHandlers[type] = { type: undefined, handler };\n\t\t                }\n\t\t                else {\n\t\t                    method = type.method;\n\t\t                    notificationHandlers[type.method] = { type, handler };\n\t\t                }\n\t\t            }\n\t\t            return {\n\t\t                dispose: () => {\n\t\t                    if (method !== undefined) {\n\t\t                        delete notificationHandlers[method];\n\t\t                    }\n\t\t                    else {\n\t\t                        starNotificationHandler = undefined;\n\t\t                    }\n\t\t                }\n\t\t            };\n\t\t        },\n\t\t        onProgress: (_type, token, handler) => {\n\t\t            if (progressHandlers.has(token)) {\n\t\t                throw new Error(`Progress handler for token ${token} already registered`);\n\t\t            }\n\t\t            progressHandlers.set(token, handler);\n\t\t            return {\n\t\t                dispose: () => {\n\t\t                    progressHandlers.delete(token);\n\t\t                }\n\t\t            };\n\t\t        },\n\t\t        sendProgress: (_type, token, value) => {\n\t\t            connection.sendNotification(ProgressNotification.type, { token, value });\n\t\t        },\n\t\t        onUnhandledProgress: unhandledProgressEmitter.event,\n\t\t        sendRequest: (type, ...args) => {\n\t\t            throwIfClosedOrDisposed();\n\t\t            throwIfNotListening();\n\t\t            let method;\n\t\t            let messageParams;\n\t\t            let token = undefined;\n\t\t            if (Is.string(type)) {\n\t\t                method = type;\n\t\t                const first = args[0];\n\t\t                const last = args[args.length - 1];\n\t\t                let paramStart = 0;\n\t\t                let parameterStructures = messages_1.ParameterStructures.auto;\n\t\t                if (messages_1.ParameterStructures.is(first)) {\n\t\t                    paramStart = 1;\n\t\t                    parameterStructures = first;\n\t\t                }\n\t\t                let paramEnd = args.length;\n\t\t                if (cancellation_1.CancellationToken.is(last)) {\n\t\t                    paramEnd = paramEnd - 1;\n\t\t                    token = last;\n\t\t                }\n\t\t                const numberOfParams = paramEnd - paramStart;\n\t\t                switch (numberOfParams) {\n\t\t                    case 0:\n\t\t                        messageParams = undefined;\n\t\t                        break;\n\t\t                    case 1:\n\t\t                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);\n\t\t                        break;\n\t\t                    default:\n\t\t                        if (parameterStructures === messages_1.ParameterStructures.byName) {\n\t\t                            throw new Error(`Recevied ${numberOfParams} parameters for 'by Name' request parameter structure.`);\n\t\t                        }\n\t\t                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));\n\t\t                        break;\n\t\t                }\n\t\t            }\n\t\t            else {\n\t\t                const params = args;\n\t\t                method = type.method;\n\t\t                messageParams = computeMessageParams(type, params);\n\t\t                const numberOfParams = type.numberOfParams;\n\t\t                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;\n\t\t            }\n\t\t            const id = sequenceNumber++;\n\t\t            let disposable;\n\t\t            if (token) {\n\t\t                disposable = token.onCancellationRequested(() => {\n\t\t                    cancellationStrategy.sender.sendCancellation(connection, id);\n\t\t                });\n\t\t            }\n\t\t            const result = new Promise((resolve, reject) => {\n\t\t                const requestMessage = {\n\t\t                    jsonrpc: version,\n\t\t                    id: id,\n\t\t                    method: method,\n\t\t                    params: messageParams\n\t\t                };\n\t\t                const resolveWithCleanup = (r) => {\n\t\t                    resolve(r);\n\t\t                    cancellationStrategy.sender.cleanup(id);\n\t\t                    disposable === null || disposable === void 0 ? void 0 : disposable.dispose();\n\t\t                };\n\t\t                const rejectWithCleanup = (r) => {\n\t\t                    reject(r);\n\t\t                    cancellationStrategy.sender.cleanup(id);\n\t\t                    disposable === null || disposable === void 0 ? void 0 : disposable.dispose();\n\t\t                };\n\t\t                let responsePromise = { method: method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };\n\t\t                traceSendingRequest(requestMessage);\n\t\t                try {\n\t\t                    messageWriter.write(requestMessage);\n\t\t                }\n\t\t                catch (e) {\n\t\t                    // Writing the message failed. So we need to reject the promise.\n\t\t                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, e.message ? e.message : 'Unknown reason'));\n\t\t                    responsePromise = null;\n\t\t                }\n\t\t                if (responsePromise) {\n\t\t                    responsePromises[String(id)] = responsePromise;\n\t\t                }\n\t\t            });\n\t\t            return result;\n\t\t        },\n\t\t        onRequest: (type, handler) => {\n\t\t            throwIfClosedOrDisposed();\n\t\t            let method = null;\n\t\t            if (StarRequestHandler.is(type)) {\n\t\t                method = undefined;\n\t\t                starRequestHandler = type;\n\t\t            }\n\t\t            else if (Is.string(type)) {\n\t\t                method = null;\n\t\t                if (handler !== undefined) {\n\t\t                    method = type;\n\t\t                    requestHandlers[type] = { handler: handler, type: undefined };\n\t\t                }\n\t\t            }\n\t\t            else {\n\t\t                if (handler !== undefined) {\n\t\t                    method = type.method;\n\t\t                    requestHandlers[type.method] = { type, handler };\n\t\t                }\n\t\t            }\n\t\t            return {\n\t\t                dispose: () => {\n\t\t                    if (method === null) {\n\t\t                        return;\n\t\t                    }\n\t\t                    if (method !== undefined) {\n\t\t                        delete requestHandlers[method];\n\t\t                    }\n\t\t                    else {\n\t\t                        starRequestHandler = undefined;\n\t\t                    }\n\t\t                }\n\t\t            };\n\t\t        },\n\t\t        trace: (_value, _tracer, sendNotificationOrTraceOptions) => {\n\t\t            let _sendNotification = false;\n\t\t            let _traceFormat = TraceFormat.Text;\n\t\t            if (sendNotificationOrTraceOptions !== undefined) {\n\t\t                if (Is.boolean(sendNotificationOrTraceOptions)) {\n\t\t                    _sendNotification = sendNotificationOrTraceOptions;\n\t\t                }\n\t\t                else {\n\t\t                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;\n\t\t                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;\n\t\t                }\n\t\t            }\n\t\t            trace = _value;\n\t\t            traceFormat = _traceFormat;\n\t\t            if (trace === Trace.Off) {\n\t\t                tracer = undefined;\n\t\t            }\n\t\t            else {\n\t\t                tracer = _tracer;\n\t\t            }\n\t\t            if (_sendNotification && !isClosed() && !isDisposed()) {\n\t\t                connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });\n\t\t            }\n\t\t        },\n\t\t        onError: errorEmitter.event,\n\t\t        onClose: closeEmitter.event,\n\t\t        onUnhandledNotification: unhandledNotificationEmitter.event,\n\t\t        onDispose: disposeEmitter.event,\n\t\t        end: () => {\n\t\t            messageWriter.end();\n\t\t        },\n\t\t        dispose: () => {\n\t\t            if (isDisposed()) {\n\t\t                return;\n\t\t            }\n\t\t            state = ConnectionState.Disposed;\n\t\t            disposeEmitter.fire(undefined);\n\t\t            const error = new Error('Connection got disposed.');\n\t\t            Object.keys(responsePromises).forEach((key) => {\n\t\t                responsePromises[key].reject(error);\n\t\t            });\n\t\t            responsePromises = Object.create(null);\n\t\t            requestTokens = Object.create(null);\n\t\t            messageQueue = new linkedMap_1.LinkedMap();\n\t\t            // Test for backwards compatibility\n\t\t            if (Is.func(messageWriter.dispose)) {\n\t\t                messageWriter.dispose();\n\t\t            }\n\t\t            if (Is.func(messageReader.dispose)) {\n\t\t                messageReader.dispose();\n\t\t            }\n\t\t        },\n\t\t        listen: () => {\n\t\t            throwIfClosedOrDisposed();\n\t\t            throwIfListening();\n\t\t            state = ConnectionState.Listening;\n\t\t            messageReader.listen(callback);\n\t\t        },\n\t\t        inspect: () => {\n\t\t            // eslint-disable-next-line no-console\n\t\t            ral_1.default().console.log('inspect');\n\t\t        }\n\t\t    };\n\t\t    connection.onNotification(LogTraceNotification.type, (params) => {\n\t\t        if (trace === Trace.Off || !tracer) {\n\t\t            return;\n\t\t        }\n\t\t        tracer.log(params.message, trace === Trace.Verbose ? params.verbose : undefined);\n\t\t    });\n\t\t    connection.onNotification(ProgressNotification.type, (params) => {\n\t\t        const handler = progressHandlers.get(params.token);\n\t\t        if (handler) {\n\t\t            handler(params.value);\n\t\t        }\n\t\t        else {\n\t\t            unhandledProgressEmitter.fire(params);\n\t\t        }\n\t\t    });\n\t\t    return connection;\n\t\t}\n\t\texports.createMessageConnection = createMessageConnection;\n\t\t//# sourceMappingURL=connection.js.map \n\t} (connection));\n\treturn connection;\n}\n\nexport { requireConnection as __require };",
      "start": 1706896525443,
      "end": 1706896525506,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1706896525506,
      "end": 1706896525506,
      "order": "normal"
    }
  ]
}
